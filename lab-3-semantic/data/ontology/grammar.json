{
 "terminal": [
  "*",
  "STRING_LITERAL",
  "INT",
  "if",
  "float",
  "!",
  "++",
  "--",
  "long",
  "/",
  "==",
  "DOUBLE",
  "=",
  ">",
  ">=",
  "&",
  "/=",
  "+",
  "~",
  "short",
  "}",
  "VOID",
  "<=",
  "*=",
  "CHAR",
  ":",
  "!=",
  "SHORT",
  "(",
  "int",
  "[",
  "<",
  "FLOAT",
  "LONG",
  "+=",
  "-=",
  "double",
  "%=",
  "-",
  "ID",
  ")",
  ",",
  ";",
  "while",
  "]",
  "else",
  "%",
  "{"
 ],
 "non-terminal": [
  "<parameter_list>",
  "<selection_stmt>",
  "<expression>",
  "<declaration_list>",
  "<declarator>",
  "<compare_op>",
  "<compound_stmt>",
  "<func_declaration>",
  "<external_declaration>",
  "<assignment_expression>",
  "<factor_expression>",
  "<compare_expression>",
  "<assignment_op>",
  "<type_specifier>",
  "<unary_op>",
  "<primary_expression>",
  "<declaration>",
  "<stmt>",
  "<initializer>",
  "<declaration_specifiers>",
  "<stmt_list>",
  "<translation_unit>",
  "<parameter_type_list>",
  "<expression_stmt>",
  "<constant>",
  "<iter_stmt>",
  "<init_declarator>",
  "<initializer_list>",
  "<s>",
  "<parameter_declaration>",
  "<unary_expression>"
 ],
 "production": [
  "<s> -->> <translation_unit>",
  "<translation_unit> -->> <external_declaration> <translation_unit>",
  "<translation_unit> -->> ###",
  "<external_declaration> -->> <func_declaration>",
  "<declaration> -->> <declaration_specifiers> ONTOLOGY-21 ;",
  "<init_declarator> -->> ###",
  "<init_declarator> -->> <initializer>",
  "<initializer> -->> <assignment_expression>",
  "<initializer> -->> { <initializer_list> }",
  "<initializer_list> -->> <initializer> , <initializer_list>",
  "<func_declaration> -->> <declaration_specifiers> <declarator> <declaration_list> <compound_stmt>",
  "<declaration_list> -->> ###",
  "<declaration_list> -->> <declaration> ONTOLOGY-22 <declaration_list>",
  "<declaration_specifiers> -->> <type_specifier> ID ONTOLOGY-31",
  "<declarator> -->> ( <parameter_type_list> )",
  "<declarator> -->> ###",
  "<parameter_type_list> -->> <parameter_list>",
  "<parameter_type_list> -->> ###",
  "<parameter_list> -->> <parameter_declaration>",
  "<parameter_declaration> -->> <declaration_specifiers> <declarator>",
  "<parameter_declaration> -->> <declaration_specifiers>",
  "<stmt> -->> <compound_stmt>",
  "<stmt> -->> <iter_stmt>",
  "<stmt> -->> <selection_stmt>",
  "<stmt> -->> <expression_stmt>",
  "<expression_stmt> -->> ;",
  "<expression_stmt> -->> <expression> ;",
  "<compound_stmt> -->> { <stmt_list> }",
  "<compound_stmt> -->> { <declaration_list> <stmt_list> }",
  "<stmt_list> -->> ###",
  "<stmt_list> -->> <stmt> <stmt_list>",
  "<iter_stmt> -->> while ( <primary_expression> ) ONTOLOGY-91 <stmt> ONTOLOGY-92",
  "<selection_stmt> -->> if ( <primary_expression> ) ONTOLOGY-81 <stmt> ONTOLOGY-82",
  "<type_specifier> -->> int ONTOLOGY-11",
  "<type_specifier> -->> float ONTOLOGY-12",
  "<type_specifier> -->> double ONTOLOGY-13",
  "<type_specifier> -->> short ONTOLOGY-14",
  "<type_specifier> -->> long ONTOLOGY-15",
  "<constant> -->> INT ONTOLOGY-41",
  "<constant> -->> FLOAT ONTOLOGY-42",
  "<constant> -->> SHORT ONTOLOGY-43",
  "<constant> -->> LONG ONTOLOGY-44",
  "<compare_op> -->> >",
  "<compare_op> -->> <",
  "<compare_op> -->> ==",
  "<compare_op> -->> >=",
  "<compare_op> -->> <=",
  "<compare_op> -->> ==",
  "<compare_op> -->> !=",
  "<unary_op> -->> &",
  "<unary_op> -->> *",
  "<unary_op> -->> +",
  "<unary_op> -->> -",
  "<unary_op> -->> ~",
  "<unary_op> -->> !",
  "<assignment_op> -->> =",
  "<assignment_op> -->> -=",
  "<assignment_op> -->> +=",
  "<assignment_op> -->> *=",
  "<assignment_op> -->> /=",
  "<assignment_op> -->> %=",
  "<expression> -->> ID = <unary_expression> ONTOLOGY-62 <factor_expression> ONTOLOGY-61",
  "<factor_expression> -->> ###",
  "<factor_expression> -->> + <unary_expression> ONTOLOGY-101",
  "<factor_expression> -->> * <unary_expression> ONTOLOGY-102",
  "<compare_expression> -->> <primary_expression> <compare_op> <primary_expression>",
  "<assignment_expression> -->> += <unary_expression>",
  "<assignment_expression> -->> -= <unary_expression>",
  "<primary_expression> -->> ID ONTOLOGY-51",
  "<primary_expression> -->> <constant> ONTOLOGY-52",
  "<primary_expression> -->> STRING_LITERAL",
  "<primary_expression> -->> ( <expression> )",
  "<unary_expression> -->> <primary_expression> ONTOLOGY-71",
  "<unary_expression> -->> ++ <unary_expression> ONTOLOGY-72",
  "<unary_expression> -->> -- <unary_expression> ONTOLOGY-73",
  "<unary_expression> -->> <unary_op> <unary_expression>"
 ]
}